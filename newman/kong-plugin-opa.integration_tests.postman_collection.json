{
	"info": {
		"_postman_id": "3ca788bc-0c72-40a3-869b-eab704cc9a50",
		"name": "kong-plugin-opa.integration_tests",
		"description": "This collection provides an integration tests suite for the kong-plugins-opa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup ",
			"item": [
				{
					"name": "Create Example Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3840cc6d-5004-4840-81f4-5ab48942c17c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{service_name}}",
									"type": "text"
								},
								{
									"key": "url",
									"value": "{{httpbin_url}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "http://{{kong_host}}:{{kong_admin_port}}/services",
							"protocol": "http",
							"host": [
								"{{kong_host}}"
							],
							"port": "{{kong_admin_port}}",
							"path": [
								"services"
							]
						},
						"description": "Inserts (or replaces) the Service under the requested resource with the definition specified in the body. The Service will be identified via the name or id attribute.\n\nWhen the name or id attribute has the structure of a UUID, the Service being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n\nWhen creating a new Service without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n\nNotice that specifying a name in the URL and a different one in the request body is not allowed."
					},
					"response": []
				},
				{
					"name": "Create Route Associated to Example Service",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{route_name}}",
									"type": "text"
								},
								{
									"key": "hosts[]",
									"value": "{{route_host}}",
									"type": "text"
								},
								{
									"key": "paths[]",
									"value": "/",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "http://{{kong_host}}:{{kong_admin_port}}/services/{{service_name}}/routes",
							"protocol": "http",
							"host": [
								"{{kong_host}}"
							],
							"port": "{{kong_admin_port}}",
							"path": [
								"services",
								"{{service_name}}",
								"routes"
							]
						},
						"description": "Inserts (or replaces) the Route under the requested resource with the definition specified in the body. The Route will be identified via the name or id attribute.\r\n\r\nWhen the name or id attribute has the structure of a UUID, the Route being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\r\n\r\nWhen creating a new Route without specifying id (neither in the URL nor in the body), then it will be auto-generated.\r\n\r\nNotice that specifying a name in the URL and a different one in the request body is not allowed."
					},
					"response": []
				},
				{
					"name": "Enable Plugin on Service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "415c0e34-343d-4dd5-ae2a-820ff8132df9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "opa",
									"type": "text"
								},
								{
									"key": "config.server.host",
									"value": "{{opa_host}}",
									"type": "text"
								},
								{
									"key": "config.policy.decision",
									"value": "httpapi/authz/allow",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "http://{{kong_host}}:{{kong_admin_port}}/services/{{service_name}}/plugins",
							"protocol": "http",
							"host": [
								"{{kong_host}}"
							],
							"port": "{{kong_admin_port}}",
							"path": [
								"services",
								"{{service_name}}",
								"plugins"
							]
						},
						"description": "Inserts (or replaces) the Plugin under the requested resource with the definition specified in the body. The Plugin will be identified via the name or id attribute.\r\n\r\nWhen the name or id attribute has the structure of a UUID, the Plugin being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\r\n\r\nWhen creating a new Plugin without specifying id (neither in the URL nor in the body), then it will be auto-generated.\r\n\r\nNotice that specifying a name in the URL and a different one in the request body is not allowed."
					},
					"response": []
				}
			],
			"description": "Setup service and route before tests run",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "421d9997-138a-4a73-a4af-2e69727556fb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4d8a6586-2a02-4b2f-bb94-b559332c96e6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test",
			"item": [
				{
					"name": "Test Allowed Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c521e4b5-b2ca-43f9-a358-43c0b5e59d7d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c3bd7e6d-ecb7-4714-bdd5-42dc89289925",
								"exec": [
									"// Base 63 URL encoding ",
									"// from https://www.jonathan-petitcolas.com/2014/11/27/creating-json-web-token-in-javascript.html",
									"function base64url(source) {",
									"",
									"  // Encode in classical base64",
									"  var encodedSource = CryptoJS.enc.Base64.stringify(source);",
									"",
									"  // Remove padding equal characters",
									"  encodedSource = encodedSource.replace(/=+$/, '');",
									"",
									"  // Replace characters according to base64url specifications",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');",
									"  encodedSource = encodedSource.replace(/\\//g, '_');",
									"",
									"  return encodedSource;",
									"}",
									"",
									"// set algorithm & token type",
									"var header = {",
									"    \"alg\": \"HS256\",",
									"    \"typ\": \"JWT\"",
									"};",
									"",
									"// set data",
									"var payload = {",
									"  \"sub\": \"1234567890\",",
									"  \"name\": \"John Doe\",",
									"  \"iat\": Math.floor(Date.now() / 1000), // issued now",
									"  \"role\": \"tester\" // valid role to access status endpoint",
									"}",
									"",
									"// encode header and payload",
									"var encodedHeader = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(header)))",
									"var encodedPayload = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(payload)))",
									"",
									"// create token",
									"var token = encodedHeader + '.' + encodedPayload ",
									"",
									"// generate verify signature",
									"var signature = base64url(CryptoJS.HmacSHA256(token, 'secret'))",
									"",
									"pm.variables.set('token', token + \".\" + signature)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{route_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{kong_host}}:{{kong_port}}/status/200",
							"protocol": "http",
							"host": [
								"{{kong_host}}"
							],
							"port": "{{kong_port}}",
							"path": [
								"status",
								"200"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Forbidden Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4a4a5ff-dc29-48e3-a392-1cd5c8e3b254",
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2b9db012-dc62-44ee-9a18-4c6fd2e54b66",
								"exec": [
									"// Base 63 URL encoding ",
									"// from https://www.jonathan-petitcolas.com/2014/11/27/creating-json-web-token-in-javascript.html",
									"function base64url(source) {",
									"",
									"  // Encode in classical base64",
									"  var encodedSource = CryptoJS.enc.Base64.stringify(source);",
									"",
									"  // Remove padding equal characters",
									"  encodedSource = encodedSource.replace(/=+$/, '');",
									"",
									"  // Replace characters according to base64url specifications",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');",
									"  encodedSource = encodedSource.replace(/\\//g, '_');",
									"",
									"  return encodedSource;",
									"}",
									"",
									"// set algorithm & token type",
									"var header = {",
									"    \"alg\": \"HS256\",",
									"    \"typ\": \"JWT\"",
									"};",
									"",
									"// set data",
									"var payload = {",
									"  \"sub\": \"1234567890\",",
									"  \"name\": \"John Doe\",",
									"  \"iat\": Math.floor(Date.now() / 1000), // issued now",
									"  \"role\": \"user\" // valid role to access status endpoint",
									"}",
									"",
									"// encode header and payload",
									"var encodedHeader = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(header)))",
									"var encodedPayload = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(payload)))",
									"",
									"// create token",
									"var token = encodedHeader + '.' + encodedPayload ",
									"",
									"// generate verify signature",
									"var signature = base64url(CryptoJS.HmacSHA256(token, 'secret'))",
									"",
									"pm.variables.set('token', token + \".\" + signature)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{route_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{kong_host}}:{{kong_port}}/status/200",
							"protocol": "http",
							"host": [
								"{{kong_host}}"
							],
							"port": "{{kong_port}}",
							"path": [
								"status",
								"200"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2cb45a11-46ce-4874-928a-db75eab157ab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8aae5f22-7c4a-4173-9816-61edf1ef8ef6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "Delete Route",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{kong_host}}:{{kong_admin_port}}/routes/{{route_name}}",
							"protocol": "http",
							"host": [
								"{{kong_host}}"
							],
							"port": "{{kong_admin_port}}",
							"path": [
								"routes",
								"{{route_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Service",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{kong_host}}:{{kong_admin_port}}/services/{{service_name}}",
							"protocol": "http",
							"host": [
								"{{kong_host}}"
							],
							"port": "{{kong_admin_port}}",
							"path": [
								"services",
								"{{service_name}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Delete service and route created for tests",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "82ac6756-c2d9-44e2-9b69-8124ecb14a98",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3a3fbb08-62e2-4843-924c-20c7cbe6c995",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "3c761474-ff06-4f54-9bca-c0919d8feed0",
			"key": "service_name",
			"value": "opa-example-service",
			"type": "string"
		},
		{
			"id": "27cb40e4-fad4-4f77-be35-3f41c8ae9de8",
			"key": "route_name",
			"value": "opa-example-route",
			"type": "string"
		},
		{
			"id": "8cc8f33a-ce78-4e9f-823d-46ccf17f0021",
			"key": "route_host",
			"value": "opa.example.com",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}